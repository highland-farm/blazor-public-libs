@inherits JsComponentBase

<div id="@ViewportId" class="viewport" @ref="ViewportElem"></div>

@code {
    [Parameter] public bool AutoStart { get; set; } = false;
    [Parameter] public bool Visible { get; set; } = true;

    // scanner init callback after component is initialized; first UI render is required for scanner to function
    [Parameter] public EventCallback OnScannerInit { get; set; }

    // auto generate an ID for the viewport div (it is required for current SimpleQuagga)
    private string ViewportId = $"e-{Guid.NewGuid().ToString("N")}";

    // reference to the viewport to pass in to SimpleQuagga init
    private ElementReference ViewportElem;

    private bool _visible;

    public async ValueTask Start() => await JsLib.CallJsVoid("SimpleQuaggaWrapper.start");

    public async ValueTask Stop() => await JsLib.CallJsVoid("SimpleQuaggaWrapper.stop");

    public async ValueTask<string> ScanCodeAsync(string scanId = null) => await JsLib.CallJs<string>("SimpleQuaggaWrapper.scanCode", scanId);

    public async ValueTask<byte[]> GetImageAsync(string scanId) => await JsLib.CallJsUnmarshalled<string, byte[]>("SimpleQuaggaWrapper.getImageUnmarshalled", scanId);

    public async ValueTask<byte[]> GetOverlayAsync(string scanId) => await JsLib.CallJsUnmarshalled<string, byte[]>("SimpleQuaggaWrapper.getOverlayUnmarshalled", scanId);

    protected override void OnInitialized()
    {
        _visible = Visible;
    }

    protected override async Task OnParametersSetAsync()
    {
        // update visibility if the visible param changes
        if (_visible != Visible)
        {
            _visible = Visible;
            if (Visible)
                await JsLib.CallJsVoid("SimpleQuaggaWrapper.show");
            else
                await JsLib.CallJsVoid("SimpleQuaggaWrapper.hide");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsLib.CallJsVoid("SimpleQuaggaWrapper.init", ViewportElem);

            // update if default JS state is different than initial params
            if (!Visible)
                await JsLib.CallJsVoid("SimpleQuaggaWrapper.hide");
            if (AutoStart)
                await Start();

            await OnScannerInit.InvokeAsync();
        }
    }

    public override async ValueTask DisposeAsync()
    {
        if (JsLib != null)
        {
            await Stop();
            await JsLib.CallJsVoid("SimpleQuaggaWrapper.destroy");
        }
        await base.DisposeAsync();
    }
}
